#include <iostream>

using namespace std;
class List
{
    class Node
    {   public:
        int value;
        Node* nextElement = 0;
        
      
    };
    private:
    int size =0;
    Node* p_begin;
    Node* p_end;
    
    public:
    void push_back(int numero)
    {
        if(size == 0)
        {
            p_begin = new Node();
            p_begin->value = numero;
            p_end = p_begin;
            size++;
        }
        else
        {
            Node* temp = new Node();
            p_end->nextElement = temp;
            p_end = p_end->nextElement;
            p_end->value = numero;
            size++;
        }
    }
    void erase()
    {
        if(size > 0)
        {
        Node* FirstElement = p_begin;
       p_begin= p_begin->nextElement;
        
        delete FirstElement;
        size--;
        }
    }
    void pop_back()
    {
        if(size == 1)
        {
            delete p_end;
            size --;
            p_end = p_begin =0;
        }
        else if(size > 0)
        {
            Node* newLastElement = p_begin;
            while(newLastElement->nextElement != p_end)
            {
                newLastElement = newLastElement->nextElement;
            }
            delete p_end;
            p_end = newLastElement;
            p_end->nextElement = 0;
            size--;
        }
    }
    void afis()
    {
        
     Node* p = p_begin;   
    while(p != 0)
    {
     cout<<p->value<<" ";
     p = p->nextElement;
    }
    }
    
    
};

int main()
{
    
    
     List myList;
     myList.push_back(1);
     myList.push_back(2);
     myList.push_back(3);
     myList.push_back(4);
     myList.push_back(5);
     myList.push_back(6);
     //myList.pop_back();
     //myList.pop_back();
     myList.pop_back();
     myList.pop_back();
     myList.pop_back();
     myList.pop_back();
     myList.pop_back();
     myList.pop_back();
     myList.pop_back();
     
     
     myList.afis();

      

    /*
    int n;
    cin>>n;
    for(int i = 1; i<=n; ++i)
    {
        cin>>p_end->value;
        if(i != n)
        {
            Node* temp = new Node();
            p_end->nextElement = temp;
            p_end = p_end->nextElement;
        }
    }
    
    
    
    
    Node* p = p_begin;
    cout<<endl;
    while(p != 0)
    {
     cout<<p->value<<" ";
     p = p->nextElement;
    }
    */
}